name: '▶️ Gemini Plan'

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

concurrency:
  group: '${{ github.workflow }}-plan-${{ github.event.issue.number }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  plan:
    # issue_commentの場合は、本文に "@gemini-cli" が含まれている場合のみ実行
    if: github.event_name == 'issues' || contains(github.event.comment.body, '@gemini-cli')
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
      issues: 'write'
      pull-requests: 'read'

    steps:
      - name: 'Mint identity token'
        id: 'mint_identity_token'
        # ワークフロー内シークレットやリポジトリ変数にAPP_IDが設定されている場合のみ実行
        if: vars.APP_ID
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'
          permission-issues: 'write'

      - name: 'Run Gemini CLI to generate a plan'
        id: 'run_gemini'
        uses: 'google-github-actions/run-gemini-cli@main'
        env:
          TITLE: '${{ github.event.issue.title }}'
          DESCRIPTION: '${{ github.event.issue.body || github.event.comment.body }}'
          GITHUB_TOKEN: '${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          REPOSITORY: '${{ github.repository }}'
        with:
          # 以下はご自身の環境に合わせて設定してください
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gemini_debug: '${{ fromJSON(vars.DEBUG || vars.ACTIONS_STEP_DEBUG || true) }}'
          # Geminiへの指示プロンプト
          prompt: |-
            ## Task: Generate and Post a Plan
            Your goal is to analyze the user's request and create a step-by-step plan.

            ### User Request
            - **Title**: `${TITLE}`
            - **Description**: `${DESCRIPTION}`

            ### Instructions
            1.  Analyze the request and formulate a concise, multi-step plan.
            2.  Format the plan using the provided markdown template.
            3.  Your final and ONLY output MUST be a single `mcp__github__add_issue_comment` tool call.
            4.  **Crucially, you must use the following parameters for the tool call:**
                - `repository`: "${REPOSITORY}"
                - `issueNumber`: ${{ISSUE_NUMBER}}
                - `body`: (Your generated plan markdown)

            ### Plan Template (for the `body` parameter)
            ```markdown
            ## 🤖 AI Assistant: Plan of Action
            I have analyzed the request and propose the following plan. **This plan will not be executed until a maintainer comments `/approve` on this issue.**
            **Resource Estimate:**
            *   **Estimated Tool Calls:** ~4-5
            *   **Files to Modify/Create:** 1
            **Proposed Steps:**
            - [ ] Step 1: Create a new branch named `feature-${{ISSUE_NUMBER}}` from the `main` branch.
            - [ ] Step 2: Create a new file named `fizzbuzz.py` with the Python script that implements the FizzBuzz logic.
            - [ ] Step 3: Commit the new file with the message `feat: Add fizzbuzz script for issue #${{ISSUE_NUMBER}}`.
            - [ ] Step 4: Create a pull request from the `feature-${{ISSUE_NUMBER}}` branch to the `main` branch, linking it to this issue.
            Please review this plan. To approve, comment `/approve` on this issue.
            ```
          # Gemini CLIのツール設定
          settings: |-
            {
              "model": { "maxSessionTurns": 5 },
              "telemetry": { "enabled": false },
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": ["run", "-i", "--rm", "-e", "GITHUB_PERSONAL_ACCESS_TOKEN", "ghcr.io/github/github-mcp-server"],
                  "includeTools": ["add_issue_comment", "get_issue"],
                  "env": { "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}" }
                }
              }
            }